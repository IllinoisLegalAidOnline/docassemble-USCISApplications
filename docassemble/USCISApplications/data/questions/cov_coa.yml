
include:
  - docassemble.AssemblyLine:assembly_line.yml
  - docassemble.ILAO:ilao-interview-framework.yml
  - limited_scope_questions.yml
  - change_venue_address.yml
---
default screen parts:
  under: |
  footer: off
  right: |
---
code: |
  ilao_easy_form_title = "COV/COA"
  ilao_easy_form_url = "None - workshop only Easy Form"
---
metadata:
  title: >-
    COV/COA application
  short title: >-
    COV/COA application
  description: |-
    This interview helps someone in Illinois apply for a Change of Venue (COV) and/or a Change of Address (COA).
  tags:
    - "IM-00-00-00-00"
  authors:
    - Quinten Steenhuis
    - Anthony Danielson
    - Matt Newsted
    - Jim Graszer
  allowed_courts: []
  typical_role: "na"
  al_weaver_version: "playground"
  generated_on: "2024-02-04"
---
features:
  javascript: actions.js
---
features:
  progress bar: True
  progress bar multiplier: 0.01
---
objects:
  - supervisor: ALIndividual
  - preparer: ALIndividual
  - interpreter: ALIndividual
  - users: ALPeopleList.using(ask_number=True, complete_attribute='names_only')
---
code: |
  nav.set_sections(default_sections)
  set_initial_sections = True
---
#################### Interview order #####################
id: interview_order_main
mandatory: True
code: |
  set_initial_sections
  intro_cov_coa
  region
  if interpreter_present:
    interpreter.name.first
  preparer.name.first
  preparer_is_attorney
  preparer.address.address
  nav.set_section("section_retainer")
  set_progress(15)
  users.gather()
  review_initial_user_list
  nav.set_section("section_retainer")
  agrees_to_retainer
  set_progress(35)

  # COV and COA
  nav.set_section("section_covcoa")
  if change_kind != "no":  
    for idx,user in enumerate(users):
      user.address.address
      user.mailing_address.address
      if change_kind == "coa_only":
        user.previous.date
      else:
        user.immigration_judge.name.first
        user.previous.date
        user.notice_appear_date
        user.type_of_relief
        user.dhs.address.address

  nav.set_section("section_download")
  set_progress(90)
  store_variables_snapshot(
      persistent=True,
      data={
          "application_kind": change_kind,
          "zip": showifdef("users[0].address.zip"),
          "reached_interview_end": True,
          "region": showifdef("region"),
      },
  )
  children_for_retainer
  generate_downloads_task
  if generate_downloads_task.ready():
    download_completed_ea_application
  else:
    waiting_screen
---
code: |
  users[i].name.first
  users[i].aliases.gather()
  users[i].names_only = True
---
code: |
  children_for_retainer = [child for child in users if child.age_in_years() < 14]
---
variable name: default_sections
data:
  - section_family: Applicant names
  - section_retainer: Limited Retainer
  - section_covcoa: Change of Venue/Address
  - section_download: Download and print
---
id: application language and translation
question: |
  Language & Translation
fields:
  - "Does ${ users[i] } read and understand English?": users[i].user_reads_english
    datatype: yesnoradio
  - "Did ${ users[i] } use the ${ interpreter.language } interpreter?": users[i].user_used_interpreter
    datatype: yesnoradio
    default: ${ interpreter_present }
    show if:
      code: |
        interpreter_present
---
id: interpreter_present
question: |
  Is an interpreter present?
fields:
  - Is an interpreter present?: interpreter_present
    datatype: yesnoradio
  - What language will the interpreter speak?: interpreter.language
    show if: interpreter_present
    datatype: combobox
    choices:
      - Spanish
      - Arabic
      - Chinese
      - French
      - Haitian Creole
      - Korean
      - Polish
      - Portuguese
      - Russian
      - Tagalog
      - Vietnamese
  - note: |
      <h2 class="h4">Interpreter's Name</h2>
    show if: interpreter_present    
  - code: |
      interpreter.name_fields(person_or_business="person", show_if="interpreter_present", show_suffix=False)
  - note: |
      <h2 class="h4">Interpreter's Address</h2>
    show if: interpreter_present
  - Street address: interpreter.address.address
    address autocomplete: True
    show if: interpreter_present
  - Suite/Unit number: interpreter.address.unit
    required: False
    show if: interpreter_present
  - City: interpreter.address.city
    show if: interpreter_present
  - State: interpreter.address.state
    code: |
      states_list()
    default: IL  
    show if: interpreter_present
  - Zip code: interpreter.address.zip
    show if: interpreter_present
---
id: welcome
question: |
  Let's get started
subquestion: |

  This interview is for a Change of Venue and/or Change of Address only.

  <h2 class="h4">Overview</h2>

  You will work through the following sections:

  1. Gather names
  2. Complete the limited scope retainer
  3. Complete the Change of Venue and/or Change of Address for each applicant
  4. Download and print your work. You will get a separate
      set of documents for each person in the family group.
continue button field: intro_cov_coa
---
id: workshop region
question: |
  Which region is this workshop?
fields: 
  - Region: region
    datatype: radio
    choices:
      - Chicago
      - Northern Illinois
      - Western Suburbs
      - Central & Downstate Illinois
---
objects:
  - signed_in_user: ALIndividual
  - workshop: ALAddress
---
code: |
  if user_logged_in():
    signed_in_user.name.first = user_info().first_name
    signed_in_user.name.last = user_info().last_name
    signed_in_user.email = user_info().email
---
sets:
  - preparer.name.first
  - preparer_is_attorney
id: preparer name interpreter present
question: |
  Who is the volunteer/preparer assisting the applicant(s) with this application?
fields:
  - Preparer is: preparer
    datatype: object_radio
    none of the above: Someone else
    disable others:
      - preparer.name.first
      - preparer.name.middle
      - preparer.name.last
    choices: |
      [signed_in_user, interpreter] if user_logged_in() and interpreter_present else [signed_in_user] if user_logged_in() else [interpreter] if interpreter_present else []
  - note: |
      <h2 class="h4">Preparer's Name</h2>      
  - code: |
      preparer.name_fields(person_or_business="person", show_suffix=False,)
  - Is the preparer an attorney or accredited representative?: preparer_is_attorney
    datatype: yesnoradio
---
id: people
question: |
  How many people are applying for work authorization at this station?
subquestion: |
  Get the names of all people who have a **family relationship** and are here
  to get work authorization together today. For example: siblings, aunts, 
  uncles, parents, cousins, children, and spouses or intimate partners.

  Please complete a separate interview for each person who is not in 
  a family relationship with the others.

fields:
  - How many?: users.target_number
    datatype: integer
    min: 1
  - note: |
      <h2 class="h4">Name of the first family member</h2>

      Start with the head of household, one of the parents, or the oldest person in the group.
      The answers you give for this person will be used as the default for many answers.
  - First name: users[0].name.first
  - Middle name: users[0].name.middle
    required: False
  - Last name: users[0].name.last
  - Have you ever been known by a different name?: users[0].aliases.there_are_any
    datatype: yesnoradio
  - note: |
      OK, we'll get the other names you used on the next screen.
    show if: users[0].aliases.there_are_any
  - City or town of birth: users[0].city_of_birth
  - State/Province of birth: users[0].state_of_birth
  - Country of birth: users[0].country_of_birth
    input type: dropdown
    code: |
      uscis_countries_list()
  - Birthdate: users[0].birthdate
    datatype: BirthDate
    alMax: ${ today().format("yyyy-MM-dd") }
  - A Number (do not include A-): users[0].a_number
    required: False
    validate: |
      lambda y: (not y) or re.match(r'^\d{8,9}$', str(y)) or validation_error("Enter a valid 8 or 9 digit A number")
  - What was the last country you were a **resident** of before coming to the United States?: users[0].last_country_of_residence
    input type: dropdown
    code: |
      uscis_countries_list()      
  - note: |
      <h2 class="h4">We'll get the name of the remaining applicants on the next screen</h2>
    js show if: |
      val("users.target_number") > 1
---
sets:
  - users[i].name.first
id: add another applicant
question: |
  What is the name of the ${ ordinal(i) } applicant?
subquestion: |
  % if len(users.complete_elements()) == 1:
  You can give the names in any order, but you may want
  to start with the second oldest applicant.
  % endif

  So far you have named ${ bold(users.complete_elements()) }.
fields:
  - code: |
      users[i].name_fields(person_or_business="person", show_suffix=False)
  - Have you ever been known by a different name?: users[i].aliases.there_are_any
    datatype: yesnoradio
  - note: |
      OK, we'll get the other names you used on the next screen.
    show if: users[i].aliases.there_are_any
  - Country of Birth: users[i].country_of_birth
    code: |
      uscis_countries_list()
    default: |
      ${ showifdef("users[0].country_of_birth") }      
  - City or town of birth: users[i].city_of_birth
  - State/Province of birth: users[i].state_of_birth  
  - Birthdate: users[i].birthdate
    datatype: BirthDate
    alMax: ${ today().format("yyyy-MM-dd") }
  - A Number (do not include A-): users[i].a_number
    required: False
    validate: |
      lambda y: (not y) or re.match(r'^\d{8,9}$', str(y)) or validation_error("Enter a valid 8 or 9 digit A number")
  - What was the last country you were a **resident** of before coming to the United States?: users[i].last_country_of_residence
    input type: dropdown
    code: |
      uscis_countries_list()      
---
id: Has user 0 been known by a different name before?
question: |
  Has ${ users[0] } ever been known by a different name or alias?  
fields:
  - no label: users[0].aliases.there_are_any
    datatype: yesnoradio
---
id: Has user i been known by a different name before?
question: |
  Has ${ users[i] } ever been known by a different name or alias?  
fields:
  - no label: users[i].aliases.there_are_any
    datatype: yesnoradio
---
id: user 0 name i
question: |
  What was ${ users[0] }'s ${ ordinal(i) } alias or other name?
fields:
  - First name: users[0].aliases[i].first
  - Middle name: users[0].aliases[i].middle
    required: False
  - Last name: users[0].aliases[i].last
---
generic object: ALIndividual
id: x i name
question: |
  What was ${ x }'s ${ ordinal(i) } alias or other name?
fields:
  - First name: x.aliases[i].first
  - Middle name: x.aliases[i].middle
    required: False
  - Last name: x.aliases[i].last
---
generic object: ALIndividual
id: has x been known by a different name again
question: |
  Has ${ x } been known by any other names?
subquestion: |
  So far you entered ${comma_and_list(x.aliases)}.
fields:
  - no label: x.aliases.there_is_another
    datatype: yesnoradio  
---
id: has user 0 known by a different name again
question: |
  Has ${ users[0] } been known by any other names?
subquestion: |
  So far you entered ${comma_and_list(users[0].aliases)}.
fields:
  - no label: users[0].aliases.there_is_another
    datatype: yesnoradio
---
code: |
  if len(users[i].aliases.complete_elements()) >= 2:
    users[i].aliases.there_is_another = False
---
code: |
  if len(users[0].aliases.complete_elements()) >= 2:
    users[0].aliases.there_is_another = False

---
table: users.initial_review_table
rows: users
columns:
  - Name: |
      row_item.name.full(middle="full")
  - Country of birth: |
      row_item.country_of_birth
  - City of birth: |
      row_item.city_of_birth
  - State/Province of birth: |
      row_item.state_of_birth
  - Country of last residence: |
      row_item.last_country_of_residence
  - Date of birth: |
      row_item.birthdate.format("MM/dd/yyyy")
  - Age: |
      row_item.age_in_years()
  - A-Number: |
      row_item.a_number
edit:
  - name.first
confirm: True
---
id: review_initial_user_list
question: |
  OK, we'll make documents for the following people
subquestion: |
  ${ users.initial_review_table }

  ${ users.add_action() }

  On the next screens, we'll review the limited scope retainer.
continue button field: review_initial_user_list
---
id: kind of interview
question: |
  What kind of application will this family complete?
field: change_kind
buttons:
  - COV and COA: cov_and_coa
    image: landmark
  - COA only: cov_and_coa
    image: envelope
---
id: parent of user i
question: |
  Who is ${ users[i] }'s parent?
subquestion: |
  Because ${ users[i] } is a minor, the parent's signature will be used in any addenda.
fields:
  - Parent: users[i].parent
    datatype: object_radio
    choices:
      - users.complete_elements()
    exclude:
      - users[i]
---
code: |
  users[i].alternate_birthdates.there_is_another = False
---
id: your address first
question: |
  ${ users[0] }'s address
subquestion: |
  This is your current, physical address. Mailing address will be entered on another screen.
fields:
  - Street address: users[0].address.address
    address autocomplete: True
  - Address is a: users[0].address.address_type
    datatype: radio
    choices:
      - Apartment: apt
      - Suite: suite
      - Floor: floor
      - Other (including house): other
  - Apartment/Suite/Floor number: users[0].address.unit
    required: False
  - City or Town: users[0].address.city
  - State: users[0].address.state
    required: False
    code: |
      states_list(country_code=AL_DEFAULT_COUNTRY)
    default: ${ AL_DEFAULT_STATE }
  - ZIP: users[0].address.zip
  - Daytime Phone Number (optional): users[0].phone_number
    required: false
  - Mobile Telephone Number (optional): users[0].mobile_number
    required: false
  - Email address (optional): users[0].email
    required: false
---
code: |
  address_choices = []
  address_choices.clear()
  for user in users.complete_elements():
    if hasattr(user.address, 'address'):
      address_choices.append(user.address)
---
reconsider:
  - address_choices
id: your address
sets:
  - users[i].address.address
  - users[i].address.city
  - users[i].address.zip
  - users[i].address.unit
  - users[i].address.state
question: |
  ${ users[i] }'s address
subquestion: |
  This is a current, physical address. Mailing address will be entered on another screen.
fields:
  - ${ users[i] }'s address is: users[i].address
    datatype: object_radio
    choices:
      - address_choices
    object labeler: |
      lambda y: y.on_one_line()
    none of the above: |
      Somewhere else
    disable others:
      - users[i].address.address
      - users[i].address.city
      - users[i].address.zip
      - users[i].address.unit
      - users[i].address.state
      - users[i].address.address_type
    default: |
      users[0].address if i > 0 else None
  - Street address: users[i].address.address
    address autocomplete: True
    # default: ${ showifdef("users[0].address.address ") }
  - Address is a: users[i].address.address_type
    datatype: radio
    choices:
      - Apartment: apt
      - Suite: suite
      - Floor: floor
      - Other (including house): other
  - Apartment/Suite/Floor number: users[i].address.unit
    required: False
    # default: ${ showifdef("users[0].address.unit ") }
  - City or Town: users[i].address.city
    # default: ${ showifdef("users[0].address.city ") }
  - State: users[i].address.state
    required: False
    code: |
      states_list(country_code=AL_DEFAULT_COUNTRY)
    default: ${ AL_DEFAULT_STATE }
    # default: ${ showifdef("users[0].address.state ") }
  - ZIP: users[i].address.zip
    # default: ${ showifdef("users[0].address.zip ") }
  - Daytime Phone Number (optional): users[i].phone_number
    required: false
    default: |
      ${ showifdef("users[0].phone_number") if i > 0 else ""}
  - Mobile Telephone Number (optional): users[i].mobile_number
    required: false
    default: |
      ${ showifdef("users[0].mobile_number") if i > 0 else ""}
  - Email address (optional): users[i].email
    required: false
---
id: your mailing address
question: |
  What is ${ users[0] }'s mailing address?
fields:
  - ${ users[0] }'s mailing address is: users[0].mailing_address
    datatype: object_radio
    choices:
      - users[0].mailing_address if defined("users[0].mailing_address.address") else users[0].address if defined("users[0].address.address") else None
    object labeler: |
      lambda y: y.on_one_line()
    none of the above: |
      Somewhere else
    disable others: True
    show if:
      code: |
        defined("users[0].address.address")
    default: |
      users[0].address
  - ${ users[0].address.address_label }: users[0].mailing_address.address
    address autocomplete: True
  - Address is a: users[0].mailing_address.address_type
    datatype: radio
    choices:
      - Apartment: apt
      - Suite: suite
      - Floor: floor
      - Other (including house): other
  - Apartment/Suite/Floor number: users[0].mailing_address.unit
    required: False
  - ${ users[0].address.city_label }: users[0].mailing_address.city
  - ${ users[0].address.state_label }: users[0].mailing_address.state
    code: |
      states_list(country_code=AL_DEFAULT_COUNTRY)
    default: ${ AL_DEFAULT_STATE }
  - ${ users[0].address.zip_label }: users[0].mailing_address.zip
    required: False      
---
id: your mailing address
question: |
  What is ${ users[i] }'s mailing address?
fields:
  - ${ users[i] }'s mailing address is: users[i].mailing_address
    datatype: object_radio
    choices:
      - users[0].mailing_address if defined("users[0].mailing_address.address") else None
      - users[i].address if defined("users[i].address.address") else None
    object labeler: |
      lambda y: y.on_one_line()
    none of the above: |
      Somewhere else
    disable others: True      
    show if:
      code: |
        defined("users[i].address.address")
    default: |
      users[0].mailing_address if i > 0 else None
  - ${ users[i].address.address_label}: users[i].mailing_address.address
    address autocomplete: True
  - Address is a: users[i].mailing_address.address_type
    datatype: radio
    choices:
      - Apartment: apt
      - Suite: suite
      - Floor: floor
      - Other (including house): other
  - Apartment/Suite/Floor number: users[i].mailing_address.unit
    required: False
  - ${ users[i].address.city_label}: users[i].mailing_address.city
  - ${ users[i].address.state_label}: users[i].mailing_address.state
    code: |
      states_list(country_code=AL_DEFAULT_COUNTRY)
    default: ${ AL_DEFAULT_STATE }
  - ${ users[i].address.zip_label}: users[i].mailing_address.zip
    required: False      
---


########################## DOWNLOADS ###############################

---
code: |
  generate_downloads_task = background_action('create_downloads')
---
id: waiting screen
question: |
  Please wait while we generate your documents
subquestion: |
  This can take a few minutes.

  <div class="spinner-border text-primary d-flex justify-content-center" role="status" style="border: 0.25rem solid #0079d0;">
    <span class="sr-only">Creating PDFs...</span>
  </div>
event: waiting_screen
reload: True
---
event: create_downloads
code: |
  download_response = {}
  for idx, user in enumerate(users):
    download_response[idx] = user.document_bundle.as_pdf()
  background_response_action('save_downloads', download_response=download_response)
---
event: save_downloads
code: |
  ans = action_argument('download_response')
  for idx, user in enumerate(users):
    user.cached_pdf = ans[idx]
  background_response()
---
id: get_docs_screen
event: download_completed_ea_application
question: |
  Download the completed application
subquestion: |
  % for user in users:
  <h2 class="h4">${ user.name.first }'s application</h2>

  ${ action_button_html(user.cached_pdf.url_for(), label=f"{ user}'s application", icon="file-pdf", size="lg", color="primary") }
  % endfor

  ${ action_button_html(url_of("new_session"), label="Start a new application", icon="square-plus", size="lg", color="secondary") }
---
objects:
  - users[i].limited_scope_retainer: ALDocument.using(title=f"{users[i]} - Limited Scope Retainer", filename=space_to_underscore(f"{users[i]} - Limited Scope Retainer"), has_addendum=False)
---
objects:
  - users[i].cover_page: ALDocument.using(title=f"Cover Page", filename="cover_page", has_addendum=False, enabled=True)
  - users[i].ending_page: ALDocument.using(title=f"Ending Page", filename="ending_page", has_addendum=False, enabled=True)
---
objects:
  - al_user_bundle: ALDocumentBundle.using(title="All documents to print and file", filename="all_documents", enabled=True, elements=[])
  - users[i].document_bundle: ALDocumentBundle.using(title=f"{users[i]} - All documents to print and file", filename=space_to_underscore(f"{users[i]} - all_documents"), enabled=True, elements=[
        users[i].cover_page,
        users[i].limited_scope_retainer,
        users[i].cov_coa_instructions,
        users[i].eoir_61_cov,
        users[i].motion_addendum,
        users[i].eoir_33_coa,
        users[i].ending_page,
      ])
---
code: |
  if users[i].age_in_years() > 13:
    users[i].limited_scope_retainer.enabled = True
  else:
    users[i].limited_scope_retainer.enabled = False
---
reconsider:
  - children_for_retainer
attachment:
  variable name: users[i].limited_scope_retainer[j]
  name: ${ users[i] } - Limited Scope Retainer
  filename: ${ space_to_underscore(f"{users[i]} - Limited Scope Retainer") }
  docx template file: limited_scope_retainer_2025.docx
  skip undefined: True
---
code: |
  def uscis_countries_list():
    """
    Returns a list of countries as strings, without the extra verbiage like "Republic of".
    We tweak the following entries:
    - "Bolivia, Plurinational State of" becomes "Bolivia"
    - Venezuela, Bolivarian Republic of becomes "Venezuela"
    - Congo, the Democratic Republic of the becomes "Congo (D.R.C.)"
    - Iran, Islamic Republic of becomes "Iran"
    - Korea, Democratic People's Republic of becomes "North Korea"
    - Korea, Republic of becomes "South Korea"
    - Lao People's Democratic Republic becomes "Laos"
    - Micronesia, Federated States of becomes "Micronesia"
    - Moldova, Republic of becomes "Moldova"
    - Palestine, State of becomes "Palestine"
    - Saint Martin (French part) becomes "Saint Martin"
    - Sint Maarten (Dutch part) becomes "Sint Maarten"
    - Taiwan, Province of China becomes "Taiwan"
    - Tanzania, United Republic of becomes "Tanzania"
    - Åland Islands becomes "Aland Islands"
    """
    country_names = [next(iter(item.values())) for item in countries_list()]
    country_names[country_names.index("Bolivia, Plurinational State of")] = "Bolivia"
    country_names[country_names.index("Venezuela, Bolivarian Republic of")] = "Venezuela"
    country_names[country_names.index("Congo, The Democratic Republic of the")] = "Congo (D.R.C.)"
    country_names[country_names.index("Iran, Islamic Republic of")] = "Iran"
    country_names[country_names.index("Korea, Democratic People's Republic of")] = "North Korea"
    country_names[country_names.index("Korea, Republic of")] = "South Korea"
    country_names[country_names.index("Lao People's Democratic Republic")] = "Laos"
    country_names[country_names.index("Micronesia, Federated States of")] = "Micronesia"
    country_names[country_names.index("Moldova, Republic of")] = "Moldova"
    country_names[country_names.index("Palestine, State of")] = "Palestine"
    country_names[country_names.index("Saint Martin (French part)")] = "Saint Martin"
    country_names[country_names.index("Sint Maarten (Dutch part)")] = "Sint Maarten"
    country_names[country_names.index("Taiwan, Province of China")] = "Taiwan"
    country_names[country_names.index("Tanzania, United Republic of")] = "Tanzania"
    country_names[country_names.index("Åland Islands")] = "Aland Islands"

    # Move Venezuela and Haiti to the top
    country_names.remove("Venezuela")
    country_names.remove("Haiti")
    country_names.insert(0, "Haiti")
    country_names.insert(0, "Venezuela")
    return country_names

---
attachment:
  variable name: users[i].cover_page[j]
  name: Cover Page
  filename: cover_page
  pdf template file: cover_page.pdf
  skip undefined: True
  editable: False
  fields:
    - "document_set_for": ${ users[i].name.full(middle="full") }
---
attachment:
  variable name: users[i].ending_page[j]
  name: Ending Page
  filename: ending_page
  pdf template file: ending_page.pdf
  skip undefined: True
  editable: False
  fields:
    - "document_set_for": ${ users[i].name.full(middle="full") }